domain   = 'k8s'

# use two digits id below, please
nodes = [
  { :hostname => 'kube0',  :ip => '192.168.56.10', :id => '10' },
  { :hostname => 'kube1',  :ip => '192.168.56.11', :id => '11' },
  { :hostname => 'kube2',  :ip => '192.168.56.12', :id => '12' },
  { :hostname => 'kube3',  :ip => '192.168.56.13', :id => '13' },
  { :hostname => 'kcp0',   :ip => '192.168.56.20', :id => '20' },
  { :hostname => 'kcp1',   :ip => '192.168.56.21', :id => '21' },
  { :hostname => 'kcp2',   :ip => '192.168.56.22', :id => '22' },
]

memory =4000

$script = <<SCRIPT
sudo mv hosts /etc/hosts
chmod 0600 /home/vagrant/.ssh/id_rsa
useradd -d /home/ansible -m ansible 
sed -e 's/vagrant/ansible/' </etc/sudoers.d/vagrant >/etc/sudoers.d/ansible
cp -Rvf /home/vagrant/.ssh /home/ansible/.ssh
chown -Rvf ansible /home/ansible
apt-get -y update
apt-get -y install python-minimal python-apt zsh
chsh -s /bin/bash ansible
SCRIPT

Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  nodes.each do |node|
    config.vm.define node[:hostname] do |nodeconfig|
      name = node[:hostname]
      nodeconfig.vm.box = "ubuntu/xenial64"
      nodeconfig.vm.hostname = name
      nodeconfig.vm.network :private_network, ip: node[:ip] #, virtualbox__intnet: domain
      nodeconfig.vm.provider :virtualbox do |vb|
        vb.name = name+"."+domain
        vb.memory = memory
        vb.cpus = 1
        vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
        vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
        vb.customize ['modifyvm', :id, '--macaddress1', "5CA1AB1E00"+node[:id]]
        vb.customize ['modifyvm', :id, '--natnet1', "192.168/16"]
      end
      nodeconfig.vm.provision "file", source: "hosts", destination: "hosts"
      nodeconfig.vm.provision "file", source: "~/.vagrant.d/insecure_private_key", destination: "/home/vagrant/.ssh/id_rsa"
      nodeconfig.vm.provision "shell", inline: $script
      #if name == "master"
      #   nodeconfig.vm.network  "forwarded_port", guest: 6443, host: 6443
      #end
    end
  end
end
